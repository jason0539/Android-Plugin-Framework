apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.0"

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    defaultConfig {
        applicationId "com.example.plugintest"
        minSdkVersion 11
        targetSdkVersion 25
        versionCode 1
        versionName "1.0.1"
        //路由配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ moduleName : project.getName() ]
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        textReport false
        htmlReport false
        xmlReport false
    }

    signingConfigs {
        debug {
            storeFile file("../PluginMain/limpoxe.keystore")
            storePassword "123456"
            keyAlias "limpoxe"
            keyPassword "123456"
        }

        release {
            storeFile file("../PluginMain/limpoxe.keystore")
            storePassword "123456"
            keyAlias "limpoxe"
            keyPassword "123456"
        }
    }

    buildTypes {
        debug {
            versionNameSuffix '_' + getDate()
            debuggable true
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            versionNameSuffix '_' + getDate()
            debuggable true
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

//    dataBinding {
//        enabled = true
//    }
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy_MM_dd_HH_mm_ss')
    return formattedDate
}

dependencies {

    compile project(":Samples:plugintest3");

    //////////////////////////////////////////////////////////////////////
    //下面这一堆provided的配置，是因为这些包在编译宿主的时候，已经被打包到宿主的apk中。
    //所以这里打包非独立插件的时候，要通过provided配置防止这些包被打入非独立插件。
    //如果是独立插件，无需任何特殊配置
    /////////////////////////////////////////////////////////////////////

    //注意这里写的是debug，所以要debug编译宿主和PluginBase
    provided files(project(':Samples:PluginMain').getBuildDir().absolutePath + '/outputs/PluginMain-debug.jar')

    provided files(project(':Samples:PluginBase').getBuildDir().absolutePath + '/outputs/apk/PluginBase-debug.jar')

    //Test ButterKnife
    //compile 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'

    annotationProcessor 'com.alibaba:arouter-compiler:1.1.2.1'
}

afterEvaluate {
    tasks.getByName("assembleDebug").doLast {
        println '复制插件 debug apk 到 PluginMain/src/main/assets/目录下, 便于测试'
        copy {
            from(buildDir.absolutePath + '/outputs/apk/') {
                include project.name + '-' + 'debug' + '.apk'
            }
            into(project(':Samples:PluginMain').getProjectDir().absolutePath + '/src/main/assets/')
        }
    }
}

ext {
    //这2个常量在下面的apply的脚本中要用到
    //一个是指定宿主编译出来的output目录，一个是指定宿主编译出来的ap_文件
    host_output_dir = project(':Samples:PluginMain').getBuildDir().absolutePath + "/outputs"

    //注意这里写的是debug的ap_文件，使用不同的buildType应换成不同的文件名
    host_ap_path = host_output_dir + '/PluginMain-resources-universal-debug.ap_'

    //用于混淆配置
    //host_obfuscated_jar = host_output_dir + '/host_debug_obfuscated.jar'
}

//apply from: '/Users/cailiming/develop/Android-Plugin-Framework/FairyPlugin/plugin.gradle'
apply from: "https://raw.githubusercontent.com/limpoxe/Android-Plugin-Framework/master/FairyPlugin/plugin.gradle"
