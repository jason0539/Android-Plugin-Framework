apply plugin: 'com.android.application'
//A const defined in the top-level build.gradle file
apply from: HOST_FAIRY_SCRIPT

apply from: 'vcs.gradle'

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor(1, 'HOURS')
        //force 'com.android.support:appcompat-v7:27.0.0'
    }
}

repositories {
    google()
}

android {

    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    defaultConfig {
        applicationId "com.example.pluginmain"
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 6
        versionName "1.2.0_" + project.ext.VCS_commitId

        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        //路由配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        textReport false
        htmlReport false
        xmlReport false
    }

    signingConfigs {
        debug {
            storeFile file("limpoxe.keystore")
            storePassword "123456"
            keyAlias "limpoxe"
            keyPassword "123456"
        }

        release {
            storeFile file("limpoxe.keystore")
            storePassword "123456"
            keyAlias "limpoxe"
            keyPassword "123456"
        }
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            debuggable true
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', "x86"//select ABIs to build APKs for
            //universalApk true //generate an additional APK that contains all the ABIs
        }
    }
}

dependencies {
    // //路由配置
//    compile 'com.alibaba:arouter-api:1.2.1.1'
    compile 'com.tuotuo.solo:tuoARouter:1.4'//base on 1.2.1.1
    annotationProcessor 'com.alibaba:arouter-compiler:1.1.2.1'

    //implementation('com.limpoxe.fairy:FairyPlugin:0.0.63-snapshot@aar')//通过后缀@aar来中断依赖传递
    implementation project(':FairyPlugin')
    //optional
    //compile('com.limpoxe.support:android-servicemanager:1.0.5@aar')

    //配置内置插件，宿主编译时会将这些插件打包到自己到assets目录下面
    //注意编译顺序：
    //1、先编译宿主，产出2个文件：宿主bar文件，宿主apk
    //2、再编译插件，编译插件时依赖宿主的bar文件
    //3、再重新编译宿主，依赖第二步编译出来的插件，目的是将插件内置到宿主中，
    //   如果宿主发布时不需要内置插件，不需要第3步。
    //支持坐标依赖
    //innerPlugin 'xxx:xxx:xxx@apk'
    innerPlugin files(project(':Samples:PluginTest').getBuildDir().absolutePath + '/outputs/apk/debug/PluginTest-debug.apk')
    innerPlugin files(project(':Samples:admobdemo').getBuildDir().absolutePath + '/outputs/apk/debug/admobdemo-debug.apk')
    innerPlugin files(project(':Samples:baidumapsdk').getBuildDir().absolutePath + '/outputs/apk/debug/baidumapsdk-debug.apk')
    innerPlugin files(project(':Samples:PluginHelloWorld').getBuildDir().absolutePath + '/outputs/apk/debug/PluginHelloWorld-debug.apk')
    innerPlugin files(project(':Samples:PluginTesBase').getBuildDir().absolutePath + '/outputs/apk/debug/PluginTesBase-debug.apk')
    innerPlugin files(project(':Samples:PluginTest2').getBuildDir().absolutePath + '/outputs/apk/debug/PluginTest2-debug.apk')
    innerPlugin files(project(':Samples:wxsdklibrary').getBuildDir().absolutePath + '/outputs/apk/debug/wxsdklibrary-debug.apk')

    implementation project(':Samples:PluginShareLib')

    implementation 'com.android.support:design:27.0.0'

    implementation 'com.tencent.bugly:crashreport:2.1.5'
    //implementation 'com.umeng.analytics:analytics:latest.integration'

    implementation 'org.greenrobot:eventbus:3.0.0'

    //Test ButterKnife
    implementation 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
}

fairy {
    //可选配置，用于指定插件进程名。
    //不设置即使用默认的独立进程(:plugin)
    //设置为空串或者null即是和宿主同进程
    //pluginProcess = ":plugin"
}

//使用Instant run时，host.gradle中处理插件进程的配置获取不到，这里写死如何处理进程
afterEvaluate {
    def debugTask = project.tasks.findByName("processDebugManifest")
    if (debugTask) {
        debugTask.doLast {
            println "=============================开始任务：" + debugTask
            File manifestFile = new File("${project.buildDir}/intermediates/manifests/instant-run/debug/AndroidManifest.xml")
            if (manifestFile.exists()) {
                def originManifestContent = manifestFile.getText('UTF-8')
                println "=============================源文件内容：" + originManifestContent
                def modifyedManifestContent = originManifestContent.replaceAll("android:process=\":plugin\"", "")
                println "=============================修改后文件内容：" + modifyedManifestContent
                manifestFile.write(modifyedManifestContent, 'UTF-8')
            }
        }
    }
}